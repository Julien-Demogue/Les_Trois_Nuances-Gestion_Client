"use strict";const e=require("electron"),a=require("node:path"),r=require("fs"),c=require("fs/promises");process.env.DIST=a.join(__dirname,"../dist");process.env.VITE_PUBLIC=e.app.isPackaged?process.env.DIST:a.join(process.env.DIST,"../public");let n;const d=process.env.VITE_DEV_SERVER_URL;function p(){n=new e.BrowserWindow({icon:"icon.ico",width:1920,height:1080,fullscreen:!0,frame:!1,webPreferences:{preload:a.join(__dirname,"preload.js"),nodeIntegration:!0,contextIsolation:!1}}),n.webContents.on("did-finish-load",()=>{n==null||n.webContents.send("main-process-message",new Date().toLocaleString())}),d?n.loadURL(d):n.loadFile(a.join(process.env.DIST,"index.html"))}e.app.on("window-all-closed",()=>{process.platform!=="darwin"&&(e.app.quit(),n=null)});e.app.on("activate",()=>{e.BrowserWindow.getAllWindows().length===0&&p()});e.app.whenReady().then(async()=>{await f(),p()});async function f(){const o="clients.json";try{await c.access(o,c.constants.F_OK)}catch(t){t.code==="ENOENT"?(await c.writeFile(o,"[]"),console.log(`Created clients.json file at ${o}`)):console.error(`Error checking for clients.json file: ${t}`)}}const h=()=>{const o=new Date().toLocaleDateString("fr-FR").split("/").join("-"),t={title:"Sauvegarder les données client",defaultPath:e.app.getPath("downloads")+("/fichier_client ("+o+")"),filters:[{name:"Fichiers json",extensions:["json"]},{name:"Tous les fichiers",extensions:["*"]}]};n&&e.dialog.showSaveDialog(n,t).then(async i=>{if(i.filePath)try{const s=await r.promises.readFile("clients.json","utf-8");await r.writeFile(i.filePath,s,l=>{console.error(l)}),console.log(`Fichier enregistre : ${i.filePath}`)}catch(s){console.error(`Erreur lors de l'enregistrement du fichier : ${s.message}`)}else console.log("Enregistrement annule")})},w=()=>{const o={title:"Importer les données client",defaultPath:e.app.getPath("downloads"),filters:[{name:"Fichiers json",extensions:["json"]},{name:"Tous les fichiers",extensions:["*"]}]};n&&e.dialog.showOpenDialog(n,o).then(async t=>{if(t.filePaths.length>0){const i=t.filePaths[0],s=await r.promises.readFile(i,"utf-8"),l=JSON.parse(s);await r.promises.writeFile("clients.json",JSON.stringify(l,null,2)),console.log(`Fichier importe : ${i}`)}else console.log("Importation annulee")})};e.ipcMain.on("export-data",(o,t)=>{h()});e.ipcMain.on("import-data",(o,t)=>{w()});
